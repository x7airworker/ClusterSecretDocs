{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ClusterSecret","text":"<p>Cluster wide secrets</p> <p>ClusterSecret operator makes sure all the matching namespaces have the secret available and up to date.</p> <ul> <li>New namespaces, if they match the pattern, will also have the secret.</li> <li>Any change on the ClusterSecret will update all related secrets. Including changing the match pattern. </li> <li>Deleting the ClusterSecret deletes \"child\" secrets (all cloned secrets) too.</li> </ul> <p></p> <p>Here is how it looks like:</p> <pre><code>Kind: ClusterSecret\napiVersion: clustersecret.io/v1\nmetadata:\n  namespace: clustersecret\n  name: default-wildcard-certifiate\nmatchNamespace:\n  - prefix_ns-*\n  - anothernamespace\navoidNamespaces:\n  - supersecret-ns\ndata:\n  tls.crt: BASE64\n  tls.key: BASE64\n</code></pre>"},{"location":"#use-cases","title":"Use cases.","text":"<p>Use it for certificates, registry pulling credentials and so on.</p> <p>when you need a secret in more than one namespace. you have to: </p> <p>1- Get the secret from the origin namespace. 2- Edit the  the secret with the new namespace. 3- Re-create the new secret in the new namespace. </p> <p>This could be done with one command:</p> <pre><code>kubectl get secret &lt;secret-name&gt; -n &lt;source-namespace&gt; -o yaml \\\n| sed s/\"namespace: &lt;source-namespace&gt;\"/\"namespace: &lt;destination-namespace&gt;\"/\\\n| kubectl apply -n &lt;destination-namespace&gt; -f -\n</code></pre> <p>Clustersecrets automates this. It keep track of any modification in your secret and it will also react to new namespaces. </p>"},{"location":"#limit-clustersecret-to-certain-namespaces","title":"Limit ClusterSecret to certain namespaces.","text":"<p>This can be archived by changing the RBAC. You may want to replace https://github.com/zakkg3/ClusterSecret/blob/master/yaml/00_rbac.yaml#L43-L46 for a new namespaced role and its correspondent rolebinding.</p> <p>Here is the official doc: https://kubernetes.io/docs/reference/access-authn-authz/rbac/</p>"},{"location":"#update-a-clustersecret-object","title":"Update a ClusterSecret object","text":"<p>This will trigger the operator to also update all secrets that it matches.</p>"},{"location":"#optional","title":"optional","text":"<p>overwrite the deployment command with kopf namespaces instead of the \"-A\" (all namespaces)</p>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#replace_exisiting","title":"replace_exisiting","text":"<p>This enviroment variable is set the behaviour when an existing secret with same same conflicts. Default is to ignore it and do nothing (to not loose any unintentional data)  But in some cases we want ClusterSecret to update/reeplace it. In that case set this varaible to 'true'.</p>"},{"location":"dev/","title":"Develop & Debug","text":""},{"location":"dev/#dev-debugging","title":"Dev &amp; Debugging.","text":"<p>NOTE: in debug mode object data (the secret) are sent to stdout, potentially logs are being collected by Loki / Elasticsearch or any log management platform -&gt; Not for production!.</p> <p>Overwirte deployment entrypoint (Kubernetes <code>command</code>) from <code>kopf run /src/handlers.py</code> to <code>kopf run /src/handlers.py --verbose</code></p>"},{"location":"dev/#dev-run-it-in-your-terminal","title":"Dev: Run it in your terminal.","text":"<p>For development you dont want to build/push/recreate pod every time. Instead we can run the operator locally:</p> <p>Once you have the config in place (kubeconfig) you can just install the requirementes (pip install /base-image/requirements.txt) and then run the operator from your machine (usefull for debbuging.)</p> <pre><code>kopf run ./src/handlers.py --verbose -A\n</code></pre> <p>Make sure to have the proper RBAC in place (<code>kubectl apply -f yaml/00_rbac.yaml</code>) and also the CRD definition (<code>kubectl apply -f yaml/01_crd.yaml</code>)</p>"},{"location":"dev/#run-a-dev-environment","title":"Run a dev environment.","text":"<p>It is recommendable to use kind for this porpuse. Also podman is great. <code>make test-env</code></p> <p>when done:</p> <p><code>stop-test-env</code></p>"},{"location":"dev/#build-the-images","title":"Build the images","text":"<p>Images are built by Github actions and pushed to quay on 'git tag'.</p> <p>To build this locally there is a makefile for this, you can clone this repo. edit the makefile and then run 'make all'.</p> <p>You will need the base image first and then the final image. Find the base one in the folder base-image (yes very original name)</p> <p>Running just 'make' builds and push for all arch's supported. </p>"},{"location":"dev/#other-platforms","title":"Other platforms.","text":"<p>there is a separate github action for other platforms. This is because this needs to instal builds-essentials to be able to pip install requirements (it needs to build for some archs.) This packages brings the image from ~50 mb to ~200mb.</p> <p>All platforms are being push to the same tags. as Quay supports different platforms like DockerHub. </p>"},{"location":"dev/#makefile","title":"makefile","text":"<p>its there and updated.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#install","title":"install","text":""},{"location":"install/#using-the-official-helm-chart","title":"Using the official helm chart","text":"<pre><code>helm repo add clutersecret https://charts.clustersecret.io/\nhelm install clustersecret clustersecret/cluster-secret --version 0.2.1 -n clustersecret --create-namespace\n</code></pre>"},{"location":"install/#kubectl","title":"kubectl","text":"<p>clone the repo and apply</p> <pre><code>cd ClusterSecret\nkubectl apply -f ./yaml\n</code></pre>"},{"location":"install/#requirements","title":"Requirements","text":"<p>Current version 0.0.8 is tested for Kubernetes &gt;= 1.25</p> <p>For older kubernes (&lt;1.19) use the image tag \"0.0.6\" in  yaml/02_deployment.yaml</p>"},{"location":"install/#step-by-step","title":"step by step","text":"<p>To instal ClusterSecret operator we need to create (in this order):</p> <ul> <li>RBAC resources (avoid if you are not running RBAC) to allow the operator to create/update/patch secrets: yaml/00_</li> <li>Custom resource definition for the ClusterSecret resource: yaml/01_crd.yaml</li> <li>The ClusterSecret operator itself: yaml/02_deployment.yaml || For ARM architectures: yaml/arm32v7/02_deployment.yam</li> </ul>"},{"location":"install/#local-chart","title":"Local chart","text":"<p>Clone the repo and <code>make install</code></p>"},{"location":"joincommunity/","title":"Join the discussion","text":"<p>Join on slack https://clustersecret.slack.com/ </p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#quick-start","title":"quick start:","text":"<p>create a ClusterSecret object yaml like the one above, or in the example in yaml/Object_example/obj.yaml and apply it in your cluster <code>kubectl apply -f yaml/Object_example/obj.yaml</code></p> <p>The ClusterSecret operator will pick it up and will create the secret in every matching namespace:  match <code>matchNamespace</code> but not matching  <code>avoidNamespaces</code> RegExp's.</p> <p>You can specify multiple matching or non-matching RegExp. By default it will match all, same as defining matchNamespace = * </p>"},{"location":"quickstart/#get-the-clustersecrets","title":"Get the clustersecrets","text":"<pre><code>$&gt; kubectl get csec -n clustersecret\nNAME            TYPE\nglobal-secret\n</code></pre>"},{"location":"quickstart/#minimal-example","title":"Minimal example","text":"<pre><code>apiVersion: clustersecret.io/v1\nkind: ClusterSecret\nmetadata:\n  name: global-secret\n  namespace: my-fav-namespce\ndata:\n  username: MTIzNDU2Cg==\n  password: Nzg5MTAxMTIxMgo=\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#roadmap","title":"Roadmap:","text":"<p>For an up to date roadmap please check the repo.</p> <p>https://github.com/zakkg3/ClusterSecret/blob/master/README.md#roadmap</p>"},{"location":"support/","title":"Support","text":"<p>If you need support, start with the troubleshooting guide: Run it in debug mode.  You can open issues and we will try to address them. </p> <p>That said, if you have questions, or just want to establish contact, reach out one way or another. https://flag5.com || nico at flag5.com</p>"},{"location":"valuefromsecret/","title":"Value from Secret","text":""},{"location":"valuefromsecret/#value-from-another-secret","title":"Value From another secret.","text":"<p>With this we can tell ClusterSecret to take the values from an existing secret. yaml/Object_example/value-from-obj.yaml have a working example. Note that you will need first to have the obj2.yaml applied (the source secret).</p> <pre><code>data:\n  valueFrom:\n    secretKeyRef:\n      name: &lt;secre-name&gt;\n      namespace: &lt;source-namespace&gt;\n</code></pre> <p>to-do is to specify keys or matched keys to only sync that ones. For now it will sync the whole secret.</p>"}]}